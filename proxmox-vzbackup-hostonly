#!/bin/bash
# ./vzbackup-rclone.sh rehydrate YYYY/MM/DD file_name_encrypted.bin

############ /START CONFIG
drive="gd-backup_crypt"
backups="backup_proxmox" # Remote folder for config backups
MAX_CLOUD_AGE=31 # Days to keep cloud backup copies
MAX_AGE=3 # Days to keep local backup copies
dumpdir="/mnt/pve/pvebackups01/dump" # Used for storing config backup locally
############ /END CONFIG

COMMAND=${1}
rehydrate=${2} # Format: YYYY/MM/DD
if [ ! -z "${3}" ]; then
    CMDARCHIVE=$(echo "/${3}" | sed -e 's/\(.bin\)*$//g')
fi

if [[ ${COMMAND} == 'rehydrate' ]]; then
    rclone --config /root/.config/rclone/rclone.conf \
    --drive-chunk-size=32M copy $drive:$backups/$rehydrate$CMDARCHIVE $dumpdir \
    -v --stats=60s --transfers=16 --checkers=16
fi

if [[ ${COMMAND} == 'job-start' ]]; then
    echo "Deleting old config backups (older than $MAX_AGE days)"
    protected=$(find $dumpdir -type f -name *.protected | wc -l)
    if [ $protected -gt 0 ]; then 
        echo "Found protected files, skipping those"
        find $dumpdir -type f $(printf "! -wholename %s " $(find $dumpdir -type f -name *.protected | sed s/.protected/*/)) -mtime +$MAX_AGE -exec /bin/rm -f {} \;
    else
        find $dumpdir -type f -mtime +$MAX_AGE -exec /bin/rm -f {} \;
    fi
fi

if [[ ${COMMAND} == 'job-end' || ${COMMAND} == 'job-abort' ]]; then
    echo "Backing up main PVE configs"
    _tdir=${TMP_DIR:-/var/tmp}
    _tdir=$(mktemp -d $_tdir/proxmox-XXXXXXXX)
    function clean_up {
        echo "Cleaning up"
        rm -rf $_tdir
    }
    trap clean_up EXIT

    _now=$(date +%Y-%m-%d.%H.%M.%S)
    _HOSTNAME=$(hostname -f)
    _filename1="$_tdir/proxmoxetc.$_now.tar"
    _filename2="$_tdir/proxmoxpve.$_now.tar"
    _filename3="$_tdir/proxmoxroot.$_now.tar"
    _filename4="$_tdir/proxmox_backup_${_HOSTNAME}_${_now}.tar.gz"

    echo "Creating tar archives"
    tar --warning='no-file-ignored' -cPf "$_filename1" /etc/.
    tar --warning='no-file-ignored' -cPf "$_filename2" /var/lib/pve-cluster/.
    tar --warning='no-file-ignored' -cPf "$_filename3" /root/.

    echo "Compressing backup"
    tar -cvzPf "$_filename4" $_tdir/*.tar

    cp -v $_filename4 $dumpdir/

    echo "Uploading config backup to remote"
    timepath="$(date +%Y-%m-%d)"
    rclone --config /root/.config/rclone/rclone.conf \
        --drive-chunk-size=32M move $_filename4 $drive:$backups/$timepath \
        -v --stats=60s --transfers=16 --checkers=16

    echo "Pruning cloud backups older than $MAX_CLOUD_AGE days"
    rclone --config /root/.config/rclone/rclone.conf \
        delete --min-age ${MAX_CLOUD_AGE}d $drive:$backups/
fi
